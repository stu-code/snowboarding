{"creationTimeStamp":"2025-08-25T16:20:38.301244Z","createdBy":"Stu.Sztukowski@sas.com","modifiedTimeStamp":"2025-08-25T16:25:45.872619Z","modifiedBy":"Stu.Sztukowski@sas.com","name":"Snowboarding2.flw","properties":{"UI_PROP_DF_EXECUTION_ORDERED":"false","UI_PROP_DF_OPTIMIZE":"false"},"links":[{"method":"GET","rel":"self","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","type":"application/vnd.sas.data.flow"},{"method":"GET","rel":"alternate","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","type":"application/vnd.sas.data.flow.summary"},{"method":"GET","rel":"up","href":"/dataFlows/dataFlows","uri":"/dataFlows/dataFlows","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","type":"application/vnd.sas.data.flow","responseType":"application/vnd.sas.data.flow"},{"method":"DELETE","rel":"delete","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61"},{"method":"POST","rel":"copy","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61/copy","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61/copy","responseType":"application/vnd.sas.data.flow"},{"method":"GET","rel":"transferExport","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","uri":"/dataFlows/dataFlows/c533c810-960e-4ab9-90fd-c99fde79bb61","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"version":4,"sourceVersion":2,"nodes":{"3a2f7480-81ce-11f0-845a-35732b9f6cd0":{"id":"3a2f7480-81ce-11f0-845a-35732b9f6cd0","name":"SNOWBOARDING_GPS_HR","nodeType":"outputTable","priority":5,"properties":{"UI_PROP_INPUT_PORT|inTable|0":"|inTable|","UI_PROP_LOCATION":"705 -40.499969482421875","UI_PROP_OUTPUT_PORT|outTable|0":"|outTable|"},"tableReference":{"referenceType":"parameter","parameterId":"3a2f7480-81ce-11f0-845a-35732b9f6cd0"},"outputTableArguments":{}},"4db0da40-81cd-11f0-845a-35732b9f6cd0":{"id":"4db0da40-81cd-11f0-845a-35732b9f6cd0","name":"Load to CAS","nodeType":"step","priority":10,"properties":{"UI_PROP_INPUT_PORT|_input|0":"|_input|","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"827.0001220703125 20.500015258789062","UI_PROP_OUTPUT_PORT|_output|0":"|_output|"},"portMappings":[{"portName":"_output","mappingType":"tableStructure","tableStructure":{"columnDefinitions":[{"version":2,"name":"timestamp","index":0,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false,"format":{"name":"DATETIME.","length":0,"decimals":2}},{"version":2,"name":"lat","index":1,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"lon","index":2,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"lift_nbr","index":3,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"run_nbr","index":4,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"elevation","index":5,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"speed","index":6,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"bpm","index":7,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"hr_sensor_confidence","index":8,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false}]}}],"arguments":{"_append":false,"_input":{"portIndex":0,"portName":"_input","referenceType":"inputPort"},"_listing":false,"_memfmt":{"label":"DVR","value":"DVR"},"_output":{"arguments":{},"portIndex":0,"portName":"_output","referenceType":"outputPort"},"_promote":true,"_promptMetadata":{"_append":{"type":"checkbox"},"_input":{"type":"inputtable"},"_listing":{"type":"checkbox"},"_memfmt":{"type":"radiogroup"},"_output":{"type":"outputtable"},"_promote":{"type":"checkbox"},"caslib":{"type":"dropdown"}},"caslib":{"value":"casuser"},"modifiedTimeStamp":"2024-06-14T19:20:26.454023Z"},"stepReference":{"type":"uri","path":"/dataFlows/steps/5998a470-a880-4f3b-bb26-be549c1b0612"}},"5d381280-81cd-11f0-845a-35732b9f6cd0":{"id":"5d381280-81cd-11f0-845a-35732b9f6cd0","name":"Create CAS Session and Assign CASLibs","nodeType":"step","priority":2,"properties":{"UI_PROP_INPUT_PORT|inTable|0":"|inTable|","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"828 -92.90618896484375","UI_PROP_OUTPUT_PORT|outTable|0":"|outTable|"},"portMappings":[{"portName":"outTable","mappingType":"tableStructure","tableStructure":{}}],"arguments":{"_promptMetadata":{"cas_session":{"type":"textfield"},"caslib_name":{"type":"textfield"},"inTable":{"type":"inputtable"},"outTable":{"type":"outputtable"}},"cas_session":"casauto","caslib_name":"casuser","inTable":{"portIndex":0,"portName":"inTable","referenceType":"inputPort"},"modifiedTimeStamp":"2023-02-23T20:08:05.238942Z","outTable":{"arguments":{},"portIndex":0,"portName":"outTable","referenceType":"outputPort"}},"stepReference":{"type":"uri","path":"/dataFlows/steps/de264a0c-5149-4e66-a1d5-48003e7f53c7"}},"701b1560-81cc-11f0-845a-35732b9f6cd0":{"id":"701b1560-81cc-11f0-845a-35732b9f6cd0","name":"Read GPS Metadata","description":"GPS metadata is within a .slopes file, which is a ZIP file. When we unzip it, we read Metadata.xml. It has a ton of variables. The main ones we want are:\n\n- start - Start time of activity\n- end - End time of activity\n- type - Type of activity (Lift or Run)\n- numberOfType - Which lift or run number the activity is for (e.g. first run, second lift, etc.)\n","nodeType":"step","priority":13,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"75.99993896484375 52.00006103515625","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{"columnDefinitions":[{"version":2,"name":"avgSpeed","index":0,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"distance","index":1,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"duration","index":2,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"end","index":3,"type":"Numeric","rawLength":8,"formattedLength":26,"indexed":false,"format":{"name":"E8601DT26.6","length":26,"decimals":6}},{"version":2,"name":"maxAlt","index":4,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"maxLat","index":5,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"maxLong","index":6,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"minAlt","index":7,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"minLat","index":8,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"minLong","index":9,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"minSpeed","index":10,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"numberOfType","index":11,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"start","index":12,"type":"Numeric","rawLength":8,"formattedLength":26,"indexed":false,"format":{"name":"E8601DT26.6","length":26,"decimals":6}},{"version":2,"name":"timeOfDay","index":13,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"topSpeed","index":14,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"topSpeedAlt","index":15,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"topSpeedLat","index":16,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"topSpeedLong","index":17,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"type","index":18,"type":"Char","rawLength":4,"formattedLength":0,"indexed":false},{"version":2,"name":"vertical","index":19,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"trackIDs","index":20,"type":"Char","rawLength":36,"formattedLength":0,"indexed":false}]}}],"arguments":{"codeOptions":{"code":"df_list   = []\nfile_list = [file_name for file_name in os.listdir(gps_data) if file_name.endswith(\".slopes\")]\n    \n# .slopes files are just zip files with some CSVs and XML metadata.\n# We just want to read Metadata.xml\nfor slopes_file in file_list:\n    with ZipFile(os.path.join(gps_data, slopes_file), 'r') as zip_file:\n        with zip_file.open('Metadata.xml') as xml_file:\n            df = pd.read_xml(xml_file, parser='etree', xpath='.//Action')\n            \n    # Convert start/end to datetimes without the timezone\n    df[['start', 'end']] = df[['start', 'end']].map(lambda x: parser.parse(x, ignoretz=True))\n    df_list.append(df)\n        \ndf_gps_meta = (\n    pd.concat(df_list, ignore_index=True)\n      .sort_values('start')\n      .reset_index(drop=True)\n)\n\nSAS.df2sd(df_gps_meta, 'gps_meta')","contentType":"embedded","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"}},"8ce08040-81cc-11f0-845a-35732b9f6cd0":{"id":"8ce08040-81cc-11f0-845a-35732b9f6cd0","name":"GPS_META","nodeType":"outputTable","priority":12,"properties":{"UI_PROP_INPUT_PORT|inTable|0":"|inTable|","UI_PROP_LOCATION":"190.0001220703125 51.999908447265625","UI_PROP_OUTPUT_PORT|outTable|0":"|outTable|"},"tableReference":{"referenceType":"parameter","parameterId":"8ce08040-81cc-11f0-845a-35732b9f6cd0"},"outputTableArguments":{}},"d3934180-81cc-11f0-845a-35732b9f6cd0":{"id":"d3934180-81cc-11f0-845a-35732b9f6cd0","name":"GPS Metadata Fast Merge","description":"Fast merge GPS data with GPS Metadata","nodeType":"step","priority":3,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"472 -40.500030517578125","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{}}],"arguments":{"codeOptions":{"code":"data gps_filtered;\n    set gps;\n    retain start end type numberOfType rc;\n\n    if(_N_ = 1) then do;\n        length type $4.;\n\n        dcl hash meta(dataset: 'gps_meta', ordered: 'yes');\n            meta.defineKey('start', 'end');\n            meta.defineData('start', 'end', 'type', 'numberOfType');\n        meta.defineDone();\n\n        dcl hiter iter('meta');\n\n        call missing(start, end, type, numberOfType);\n\n        /* Get the first value from the hash table */\n        rc = iter.first();\n    end;\n\n    /* If we'ved to a new run, get the next timestamp */\n    if(timestamp > end) then rc = iter.next();\n\n    /* As long as there's a value from the hash table and the\n       GPS timestamp is between the start/end points of the\n       metadata timestamp, then get the run/lift number and output */\n    if(rc = 0 and start <= timestamp <= end) then do;\n        if(type = 'Run') then run_nbr = numberOfType;\n            else lift_nbr = numberOfType;\n        output;\n    end;\n\n    drop start end type numberOfType rc;\nrun;","contentType":"embedded","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde"}},"d5000600-81ce-11f0-845a-35732b9f6cd0":{"id":"d5000600-81ce-11f0-845a-35732b9f6cd0","name":"SNOWBOARDING_GPS_HR","nodeType":"outputTable","priority":11,"properties":{"UI_PROP_INPUT_PORT|inTable|0":"|inTable|","UI_PROP_LOCATION":"953.0001220703125 20.500015258789062","UI_PROP_OUTPUT_PORT|outTable|0":"|outTable|"},"tableReference":{"referenceType":"parameter","parameterId":"d5000600-81ce-11f0-845a-35732b9f6cd0"},"outputTableArguments":{"arguments":{"CAS":{"persist":false,"promote":false,"replaceWithPersist":false,"replaceWithPromote":false}}}},"dcd910d0-81cc-11f0-845a-35732b9f6cd0":{"id":"dcd910d0-81cc-11f0-845a-35732b9f6cd0","name":"Merge GPS - HR","description":"Merge the closest GPS timestamp to the closest Heartrate timestamp and dedupe","nodeType":"step","priority":4,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"600.9998779296875 -40.5","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{"columnDefinitions":[{"version":2,"name":"timestamp","index":0,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false,"format":{"name":"DATETIME.","length":0,"decimals":2}},{"version":2,"name":"lat","index":1,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"lon","index":2,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"lift_nbr","index":3,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"run_nbr","index":4,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"elevation","index":5,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"speed","index":6,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"bpm","index":7,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"hr_sensor_confidence","index":8,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false}]}}],"arguments":{"codeOptions":{"code":"proc sql;\n    create table snowboarding_gps_hr(drop=dif) as\n        select round(gps.timestamp) as timestamp format=datetime.2\n            , gps.lat\n            , gps.lon\n            , gps.lift_nbr\n            , gps.run_nbr\n            , gps.elevation*3.28084 as elevation\n            , gps.speed\n            , hr.bpm\n            , hr.confidence as hr_sensor_confidence\n            , abs(round(hr.timestamp) - round(gps.timestamp)) as dif\n        from gps_filtered as gps\n        left join\n            hr\n        on   dhms(datepart(gps.timestamp), hour(gps.timestamp), minute(gps.timestamp), 0)\n            = dhms(datepart(hr.timestamp), hour(hr.timestamp), minute(hr.timestamp), 0)\n        group by calculated timestamp\n        having dif = min(dif)\n    ;\nquit;\n\nproc sort data=snowboarding_gps_hr nodupkey;\n    by timestamp;\nrun;","contentType":"embedded","variables":[{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}},{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde"}},"id-1707086364771-570":{"id":"id-1707086364771-570","name":"Setup","nodeType":"step","priority":7,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"-119 -39","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{}}],"arguments":{"codeOptions":{"code":"# The easiest way to work with this is to clone my GitHub project and set the \n# data location to where you cloned it. \n# To clone this project, go to: https://github.com/stu-code/snowboarding\n\nimport pandas as pd\nimport json\nimport os\nimport xml.etree.ElementTree as ET\nfrom dateutil import parser\n\n# Set data location here\ndata_loc = f'.../snowboarding/data'\nhr_data  = os.path.join(data_loc, 'hr')\ngps_data = os.path.join(data_loc, 'gps')","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"}},"id-1707086459998-912":{"id":"id-1707086459998-912","name":"Read Heartrate Data","description":"Heart rate data is in JSON format. Variables include:\n- dateTime - Date and time of the capture in UTC\n- bpm - Beats Per Minute\n- confidence - Confidence in accuracy of the reading. 0 = no reading could be made, 3 = highest quality signal.","nodeType":"step","priority":1,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"76 -133","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{"columnDefinitions":[{"version":2,"name":"timestamp","index":0,"type":"Numeric","rawLength":8,"formattedLength":26,"indexed":false,"format":{"name":"E8601DT26.6","length":26,"decimals":6}},{"version":2,"name":"bpm","index":1,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"confidence","index":2,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false}]}}],"arguments":{"codeOptions":{"code":"df_list  = []\n    \nfor json_file in os.listdir(hr_data):\n    with open(os.path.join(hr_data, json_file)) as f:\n        data = json.load(f)\n        \n    df = pd.json_normalize(data, sep='_')\n    df.columns = df.columns.str.lower().str.replace('value_', '')\n    df['datetime'] = ( pd.to_datetime(df['datetime'], format='%m/%d/%y %H:%M:%S', utc=True)\n                         .dt.tz_localize(None)\n                     )\n    df_list.append(df)\n        \ndf_hr = (\n    pd.concat(df_list, ignore_index=True)\n      .drop_duplicates(subset=['datetime'], ignore_index=True)\n      .rename(columns={'datetime':'timestamp'})\n      .sort_values('timestamp')\n      .reset_index(drop=True)\n)\n\n# Send all hr to SAS\nSAS.df2sd(df_hr, 'hr')","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}},{"name":"_input2","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"}},"id-1707086502239-1044":{"id":"id-1707086502239-1044","name":"Read GPS Data","description":"The GPS data is in GPX format. There are two namespaces we need to use:\n\n1. The gpx namespace: http://www.topografix.com/GPX/1/1\n2. The gte namespace http://www.gpstrackeditor.com/xmlschemas/General/1\n\nWe'll parse this as a standard XML using ElementTree.\n\nVariables include:\n- name - Name of the mountain\n- lat - Latitude\n- lon - Longitude\n- time - Timestamp of point with offset\n- hdop - Horizontal Dilution of Precision. Lower = better horizontal (lat/lon) accuracy.\n- vdop - Vertical Dilution of Precision. Lower = better vertical (elevation) accuracy.\n- speed - Speed in km/h. Part of extension in gte namespace.\n- azimuth - Compass angle. Part of extension in gte namespace.","nodeType":"step","priority":8,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"76 -39","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{"columnDefinitions":[{"version":2,"name":"timestamp","index":0,"type":"Numeric","rawLength":8,"formattedLength":26,"indexed":false,"format":{"name":"E8601DT26.6","length":26,"decimals":6}},{"version":2,"name":"lat","index":1,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"lon","index":2,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"elevation","index":3,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"speed","index":4,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false},{"version":2,"name":"azimuth","index":5,"type":"Numeric","rawLength":8,"formattedLength":0,"indexed":false}]}}],"arguments":{"codeOptions":{"code":"gpx_namespace = '{http://www.topografix.com/GPX/1/1}'\ngte_namespace = '{http://www.gpstrackeditor.com/xmlschemas/General/1}'\n    \nall_gps_data = []\nfile_list    = [file_name for file_name in os.listdir(gps_data) if file_name.endswith(\".gpx\")]\n    \nfor gpx_file in file_list:\n  with open(os.path.join(gps_data, gpx_file)) as f:\n    root = ET.parse(f)\n        \n    for trkpt in root.findall(f'.//{gpx_namespace}trkpt'):\n\n        time_elem = trkpt.find(f'{gpx_namespace}time')\n        elev_elem = trkpt.find(f'{gpx_namespace}ele')\n        gps_elem  = trkpt.find(f'.//{gpx_namespace}extensions/{gte_namespace}gps')\n\n        row = {\n                \"timestamp\": parser.parse(time_elem.text, ignoretz=True),\n                \"lat\":       float(trkpt.get(\"lat\")),\n                \"lon\":       float(trkpt.get(\"lon\")),\n                \"elevation\": float(elev_elem.text),\n                \"speed\":     float(gps_elem.get(\"speed\")),\n                \"azimuth\":   float(gps_elem.get(\"azimuth\"))\n              }\n        \n        all_gps_data.append(row)\n\ndf_gps = (\n  pd.DataFrame(all_gps_data)\n    .drop_duplicates(subset=['timestamp'], ignore_index=True)\n    .sort_values('timestamp')\n    .reset_index(drop=True)\n)\n\n# Send GPS data to SAS\nSAS.df2sd(df_gps, 'gps')","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}},{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"}},"id-1707093956843-8321":{"id":"id-1707093956843-8321","name":"Convert Timezone","description":"Set timezones to their correct location","nodeType":"step","priority":6,"properties":{"UI_PROP_INPUT_PORT|inTables|0":"|Input table 1|Input tables","UI_PROP_INPUT_PORT|inTables|1":"|Input table 2|Input tables","UI_PROP_INPUT_PORT|inTables|2":"|Input table 3|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_LOCATION":"340 -40","UI_PROP_OUTPUT_PORT|outTables|0":"|Output table 1|Output tables"},"portMappings":[{"portName":"outTables","mappingType":"tableStructure","tableStructure":{}}],"arguments":{"codeOptions":{"code":"data hr;\n    set hr;\n\n    date = datepart(timestamp);\n\n    /* Convert to MT */\n    if(   '25JAN2024'd <= date <= '28JAN2024'd\n       OR '13MAR2025'd <= date <= '15MAR2025'd)\n    then timestamp = intnx('hour', timestamp, -7, 'S');\n\n    /* Convert to ET */\n    else if(   '23FEB2024'd <= date <= '24FEB2024'd \n            OR '09FEB2025'd <= date <= '10FEB2025'd)\n    then timestamp = intnx('hour', timestamp, -5, 'S');\n    \n    drop date;\nrun;","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_input2","value":{"portIndex":1,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}},{"name":"_input3","value":{"portIndex":2,"portName":"inTables","referenceType":"inputPort"}}]}},"stepReference":{"type":"uri","path":"/dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde"}},"id-1707420057361-742":{"id":"id-1707420057361-742","name":"GPS","nodeType":"outputTable","priority":9,"properties":{"UI_PROP_INPUT_PORT|inTable|0":"|inTable|","UI_PROP_LOCATION":"191 -39","UI_PROP_OUTPUT_PORT|outTable|0":"|outTable|","usePersistedTableStructure":"false"},"tableReference":{"referenceType":"parameter","parameterId":"id-1707420057361-742"},"outputTableArguments":{}},"id-1707420125363-1631":{"id":"id-1707420125363-1631","name":"HR","nodeType":"outputTable","priority":0,"properties":{"UI_PROP_INPUT_PORT|inTable|0":"|inTable|","UI_PROP_LOCATION":"193 -133.00006103515625","UI_PROP_OUTPUT_PORT|outTable|0":"|outTable|","usePersistedTableStructure":"false"},"tableReference":{"referenceType":"parameter","parameterId":"id-1707420125363-1631"},"outputTableArguments":{}}},"stickyNotes":[{"description":"For more information on this project, see my blog:\n\nhttps://blogs.sas.com/content/sgf/2025/04/18/from-slopes-to-stats/\n","properties":{"UI_PROP_IS_EXPANDED":"true","UI_PROP_LOCATION":"-62.99993896484375 198.99993896484375","UI_PROP_NOTE_DIMENSIONS":"200 140"}}],"parameters":{"3a2f7480-81ce-11f0-845a-35732b9f6cd0":{"id":"3a2f7480-81ce-11f0-845a-35732b9f6cd0","name":"SNOWBOARDING_GPS_HR","defaultValue":{"table":{"creationTimeStamp":"2025-08-25T16:16:39.256Z","modifiedTimeStamp":"2025-08-25T16:16:39.256Z","version":3,"name":"SNOWBOARDING_GPS_HR","providerId":"Compute","dataSourceId":"Compute~fs~13028236-7c4e-4ef9-947d-8e490bea4345~fs~WORK","type":"dataTable","attributes":{"bookmarkLength":12,"columnCount":9,"compressionRoutine":"NO","dataTableType":"table","eTag":"\"qfr33ot4\"","encoding":"utf-8  Unicode (UTF-8)","engine":"V9","id":"SNOWBOARDING_GPS_HR","isCas":false,"isReadOnly":false,"libref":"WORK","logicalRecordCount":31479,"physicalRecordCount":31479,"recordLength":72,"rowCount":31479}},"source":{"creationTimeStamp":"0001-01-01T00:00:00Z","modifiedTimeStamp":"0001-01-01T00:00:00Z","version":2,"id":"WORK","name":"WORK","providerId":"Compute","parentId":"13028236-7c4e-4ef9-947d-8e490bea4345","hasTables":true,"hasEngines":false,"attributes":{"concatenationCount":0,"engineName":"V9","fileFormat":"7","flags":34848,"isHadoop":false,"libref":"WORK","physicalName":"/opt/sas/viya/config/var/tmp/compsrv/default/49629283-d6b6-48f7-b1fd-50bd2c662d4a/SAS_work3C83000001CA_sas-compute-server-8f2d6848-6fb9-43fa-9a32-8cba8d0364ef-8kghr"}}},"parameterUsage":"OUTPUT","parameterType":"table","version":2},"8ce08040-81cc-11f0-845a-35732b9f6cd0":{"id":"8ce08040-81cc-11f0-845a-35732b9f6cd0","name":"GPS_META","defaultValue":{"table":{"creationTimeStamp":"2025-08-25T16:16:38.958Z","modifiedTimeStamp":"2025-08-25T16:16:38.958Z","version":3,"name":"GPS_META","providerId":"Compute","dataSourceId":"Compute~fs~13028236-7c4e-4ef9-947d-8e490bea4345~fs~WORK","type":"dataTable","attributes":{"bookmarkLength":12,"columnCount":21,"compressionRoutine":"NO","dataTableType":"table","eTag":"\"qfr33oku\"","encoding":"utf-8  Unicode (UTF-8)","engine":"V9","id":"GPS_META","isCas":false,"isReadOnly":false,"libref":"WORK","logicalRecordCount":286,"physicalRecordCount":286,"recordLength":192,"rowCount":286}},"source":{"creationTimeStamp":"0001-01-01T00:00:00Z","modifiedTimeStamp":"0001-01-01T00:00:00Z","version":2,"id":"WORK","name":"WORK","providerId":"Compute","parentId":"13028236-7c4e-4ef9-947d-8e490bea4345","hasTables":true,"hasEngines":false,"attributes":{"concatenationCount":0,"engineName":"V9","fileFormat":"7","flags":34848,"isHadoop":false,"libref":"WORK","physicalName":"/opt/sas/viya/config/var/tmp/compsrv/default/49629283-d6b6-48f7-b1fd-50bd2c662d4a/SAS_work3C83000001CA_sas-compute-server-8f2d6848-6fb9-43fa-9a32-8cba8d0364ef-8kghr"}}},"parameterUsage":"OUTPUT","parameterType":"table","version":2},"d5000600-81ce-11f0-845a-35732b9f6cd0":{"id":"d5000600-81ce-11f0-845a-35732b9f6cd0","name":"SNOWBOARDING_GPS_HR","defaultValue":{"table":{"creationTimeStamp":"2025-08-25T16:16:39.355Z","modifiedTimeStamp":"2025-08-25T16:16:39.425Z","version":3,"name":"SNOWBOARDING_GPS_HR","providerId":"Compute","dataSourceId":"Compute~fs~13028236-7c4e-4ef9-947d-8e490bea4345~fs~casuser","type":"dataTable","attributes":{"bookmarkLength":8,"columnCount":9,"compressionRoutine":"NO","dataTableType":"table","eTag":"\"qfr33oxt\"","encoding":"utf-8  Unicode (UTF-8)","engine":"CAS","id":"SNOWBOARDING_GPS_HR","isCas":true,"isReadOnly":false,"libref":"CASUSER","logicalRecordCount":31479,"physicalRecordCount":31479,"recordLength":72,"rowCount":31479}},"source":{"creationTimeStamp":"0001-01-01T00:00:00Z","modifiedTimeStamp":"0001-01-01T00:00:00Z","version":2,"id":"casuser","name":"casuser","providerId":"Compute","parentId":"13028236-7c4e-4ef9-947d-8e490bea4345","hasTables":true,"hasEngines":false,"attributes":{"concatenationCount":0,"engineName":"CAS","flags":0,"isHadoop":false,"libref":"CASUSER","options":"caslib=\"casuser\";","physicalName":"be9cb931-13df-5741-8c4d-41b78e72559e"}}},"parameterUsage":"OUTPUT","parameterType":"table","version":2},"id-1707420057361-742":{"id":"id-1707420057361-742","name":"GPS","defaultValue":{"table":{"creationTimeStamp":"2025-08-25T16:16:38.606Z","modifiedTimeStamp":"2025-08-25T16:16:38.606Z","version":3,"name":"GPS","providerId":"Compute","dataSourceId":"Compute~fs~13028236-7c4e-4ef9-947d-8e490bea4345~fs~WORK","type":"dataTable","attributes":{"bookmarkLength":12,"columnCount":6,"compressionRoutine":"NO","dataTableType":"table","eTag":"\"qfr33ob2\"","encoding":"utf-8  Unicode (UTF-8)","engine":"V9","id":"GPS","isCas":false,"isReadOnly":false,"libref":"WORK","logicalRecordCount":32431,"physicalRecordCount":32431,"recordLength":48,"rowCount":32431}},"source":{"creationTimeStamp":"0001-01-01T00:00:00Z","modifiedTimeStamp":"0001-01-01T00:00:00Z","version":2,"id":"WORK","name":"WORK","providerId":"Compute","parentId":"13028236-7c4e-4ef9-947d-8e490bea4345","hasTables":true,"hasEngines":false,"attributes":{"concatenationCount":0,"engineName":"V9","fileFormat":"7","flags":34848,"isHadoop":false,"libref":"WORK","physicalName":"/opt/sas/viya/config/var/tmp/compsrv/default/49629283-d6b6-48f7-b1fd-50bd2c662d4a/SAS_work3C83000001CA_sas-compute-server-8f2d6848-6fb9-43fa-9a32-8cba8d0364ef-8kghr"}}},"parameterUsage":"OUTPUT","parameterType":"table","version":2},"id-1707420125363-1631":{"id":"id-1707420125363-1631","name":"HR","defaultValue":{"table":{"creationTimeStamp":"2025-08-25T16:16:39.001Z","modifiedTimeStamp":"2025-08-25T16:16:39.001Z","version":3,"name":"HR","providerId":"Compute","dataSourceId":"Compute~fs~13028236-7c4e-4ef9-947d-8e490bea4345~fs~WORK","type":"dataTable","attributes":{"bookmarkLength":12,"columnCount":3,"compressionRoutine":"NO","dataTableType":"table","eTag":"\"qfr33om1\"","encoding":"utf-8  Unicode (UTF-8)","engine":"V9","id":"HR","isCas":false,"isReadOnly":false,"libref":"WORK","logicalRecordCount":160226,"physicalRecordCount":160226,"recordLength":24,"rowCount":160226}},"source":{"creationTimeStamp":"0001-01-01T00:00:00Z","modifiedTimeStamp":"0001-01-01T00:00:00Z","version":2,"id":"WORK","name":"WORK","providerId":"Compute","parentId":"13028236-7c4e-4ef9-947d-8e490bea4345","hasTables":true,"hasEngines":false,"attributes":{"concatenationCount":0,"engineName":"V9","fileFormat":"7","flags":34848,"isHadoop":false,"libref":"WORK","physicalName":"/opt/sas/viya/config/var/tmp/compsrv/default/49629283-d6b6-48f7-b1fd-50bd2c662d4a/SAS_work3C83000001CA_sas-compute-server-8f2d6848-6fb9-43fa-9a32-8cba8d0364ef-8kghr"}}},"parameterUsage":"OUTPUT","parameterType":"table","version":2}},"connections":[{"sourcePort":{"node":"id-1707086364771-570","portName":"outTables","index":0},"targetPort":{"node":"id-1707086502239-1044","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707086502239-1044","portName":"outTables","index":0},"targetPort":{"node":"id-1707420057361-742","portName":"inTable","index":0}},{"sourcePort":{"node":"id-1707086364771-570","portName":"outTables","index":0},"targetPort":{"node":"id-1707086459998-912","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707420125363-1631","portName":"outTable","index":0},"targetPort":{"node":"id-1707093956843-8321","portName":"inTables","index":0}},{"sourcePort":{"node":"701b1560-81cc-11f0-845a-35732b9f6cd0","portName":"outTables","index":0},"targetPort":{"node":"8ce08040-81cc-11f0-845a-35732b9f6cd0","portName":"inTable","index":0}},{"sourcePort":{"node":"id-1707420057361-742","portName":"outTable","index":0},"targetPort":{"node":"id-1707093956843-8321","portName":"inTables","index":1}},{"sourcePort":{"node":"8ce08040-81cc-11f0-845a-35732b9f6cd0","portName":"outTable","index":0},"targetPort":{"node":"id-1707093956843-8321","portName":"inTables","index":2}},{"sourcePort":{"node":"id-1707093956843-8321","portName":"outTables","index":0},"targetPort":{"node":"d3934180-81cc-11f0-845a-35732b9f6cd0","portName":"inTables","index":0}},{"sourcePort":{"node":"d3934180-81cc-11f0-845a-35732b9f6cd0","portName":"outTables","index":0},"targetPort":{"node":"dcd910d0-81cc-11f0-845a-35732b9f6cd0","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707086364771-570","portName":"outTables","index":0},"targetPort":{"node":"701b1560-81cc-11f0-845a-35732b9f6cd0","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707086459998-912","portName":"outTables","index":0},"targetPort":{"node":"id-1707420125363-1631","portName":"inTable","index":0}},{"sourcePort":{"node":"dcd910d0-81cc-11f0-845a-35732b9f6cd0","portName":"outTables","index":0},"targetPort":{"node":"3a2f7480-81ce-11f0-845a-35732b9f6cd0","portName":"inTable","index":0}},{"sourcePort":{"node":"3a2f7480-81ce-11f0-845a-35732b9f6cd0","portName":"outTable","index":0},"targetPort":{"node":"5d381280-81cd-11f0-845a-35732b9f6cd0","portName":"inTable","index":0}},{"sourcePort":{"node":"3a2f7480-81ce-11f0-845a-35732b9f6cd0","portName":"outTable","index":0},"targetPort":{"node":"4db0da40-81cd-11f0-845a-35732b9f6cd0","portName":"_input","index":0}},{"sourcePort":{"node":"4db0da40-81cd-11f0-845a-35732b9f6cd0","portName":"_output","index":0},"targetPort":{"node":"d5000600-81ce-11f0-845a-35732b9f6cd0","portName":"inTable","index":0}}],"eTag":"W/\"1756139145872619000\""}